#!/usr/bin/perl -w

use strict;

my $num = '[+-]?\d+\.?\d*[dDeE]?[+-]?\d*\.?\d*';
my $inres = 0;

my ($a, $b, $c, $alpha, $beta, $gamma, $energy, $vol);
my ($time, $pressure, $atoms);
my @atomsA;
my @atomsB;
my @atomsC;
my @atomsName;
my @atomsNumber;

#my $num_skip = 0 ; # Castep files can end up concatanated - skip this number first.
#my $num_found = 0;

my $writer = 'cif'; # cif, cell or gasp...
$writer = 'tex';

while (<>) {

	if (/BFGS: Geometry optimization completed successfully/) {
#		if ($num_found <= $num_skip) {
#			$num_found ++;
#		} else {
			$inres = 1;
#			$num_found = 0;
			($a, $b, $c, $alpha, $beta, $gamma, $energy, $vol) =0;
			($time, $pressure, $atoms) =0;
			undef(@atomsA);
			undef(@atomsB);
			undef(@atomsC);
			undef(@atomsName);
			undef(@atomsNumber);
#		}
		next;
	} elsif ($inres == 0) {
		next;
	} elsif (/BFGS: Final Enthalpy\s+=\s+($num)\s+eV/) {
		$energy = $1;
		next;
	} elsif (/a =\s+($num)\s+alpha =\s+($num)/) {
		$a = $1;
		$alpha = $2;
		next;
	} elsif (/b =\s+($num)\s+beta  =\s+($num)/) {
		$b = $1;
		$beta = $2;
		next;
	} elsif (/c =\s+($num)\s+gamma =\s+($num)/) {
		$c = $1;
		$gamma = $2;
		next;
	} elsif (/Current cell volume =\s+($num)\s+A\*\*3/) {
		$vol = $1;
		next;
	} elsif (/\*  Pressure:\s+($num)/) {
		$pressure = $1;
		next;
	} elsif (/x\s+(\w+)\s+(\d+)\s+($num)\s+($num)\s+($num)\s+x/) {
		push(@atomsName, $1);
		push(@atomsNumber, $2);
		push(@atomsA, $3);
		push(@atomsB, $4);
		push(@atomsC, $5);
		$atoms ++;
		next;
	} elsif (/Total time          =\s+($num)\s+s/) {
		$time = $1;
		$inres = 0;
		if ($writer eq 'txt') {
			&write_txt;
		} elsif ($writer eq 'tex') {
			&write_tex;
		} elsif ($writer eq 'cif') {
			&write_cif;
		} elsif ($writer eq 'cell') {
			&write_cell;
		} elsif ($writer eq 'gasp') { 
                        &write_GASP;
                }
		next;
	}

}

sub write_txt {
	print "$energy $pressure $a $b $c $alpha $beta $gamma $vol\n";
}
sub write_tex {
	printf "%2.1f & %4.3f & %4.3f & %4.3f & %4.2f & %4.1f \\\\\n" , $pressure , $a , $b , $c , $beta , $vol ;
}

sub write_cif {
	print "data_" . $pressure . "GPa\n";
	print "\n";
	print "_audit_creation_method             'generated by CASTEP via castep2cif v0.1'\n";
	print "_diffrn_ambient_pressure           " .  $pressure * 1000000 . "\n"; # Pressure in kPa - strictly must be positive
	print "\n";
	print "_symmetry_space_group_name_H-M     'P 1'\n";
	print "_symmetry_Int_Tables_number        1\n";
	print "_symmetry_cell_setting             triclinic\n";
	print "\n";
	print "_cell_length_a                        $a\n";
	print "_cell_length_b                        $b\n";
	print "_cell_length_c                        $c\n";
	print "_cell_angle_alpha                     $alpha\n";
	print "_cell_angle_beta                      $beta\n";
	print "_cell_angle_gamma                     $gamma\n";
	print "\n";
	print "loop_\n";
	print "_atom_site_label\n";
	print "_atom_site_fract_x\n";
	print "_atom_site_fract_y\n";
	print "_atom_site_fract_z\n";
	print "_atom_site_occupancy\n";
	foreach my $i (0 .. ($atoms - 1)) {
		# Dump the atoms like this:   O1          0.00514      0.13054      0.96110  1.0000
		print $atomsName[$i] . $atomsNumber[$i] . "   " . $atomsA[$i] . "   " . $atomsB[$i] . "   " . $atomsC[$i] . "   1.000\n";
	}
	print "\n";
}

sub write_cell {

	print '%BLOCK LATTICE_ABC' . "\n";
	print "$a $b $c \n";
	print "$alpha $beta $gamma \n";
	print '%ENDBLOCK LATTICE_ABC' . "\n";

	print '%BLOCK POSITIONS_FRAC' . "\n";
	foreach my $i (0 .. ($atoms - 1)) {
		print $atomsName[$i] . " " . $atomsA[$i] .
			" " . $atomsB[$i] . " " . $atomsC[$i] . "\n";
	}
	print '%ENDBLOCK POSITIONS_FRAC' . "\n";

	print 'KPOINT_MP_GRID 2 1 2' . "\n";

	print '%BLOCK EXTERNAL_PRESSURE' . "\n";
	print "    $pressure    0.0000000000 0.0000000000 \n";
	print "                 $pressure    0.0000000000 \n";
	print "                              $pressure \n";
	print '%ENDBLOCK EXTERNAL_PRESSURE' . "\n";

	print '%BLOCK SPECIES_POT\n' . "\n";
	print 'O /panfs/dl/home/amw/PSpots/O_00PBE.usp ' . "\n";
	print 'Si /panfs/dl/home/amw/PSpots/Si_00PBE.usp' . "\n";
	print 'Al /panfs/dl/home/amw/PSpots/Al_00PBE.usp ' . "\n";
	print 'Na /panfs/dl/home/amw/PSpots/Na_00PBE.usp' . "\n";
	print '%ENDBLOCK SPECIES_POT' . "\n";
}

sub write_GASP {

  # Get lattice vextors on cart frame from cell
  my $cosa;
  if ($alpha == 90.0) {
      $cosa = 0.0;
  } else {
      my $alp = $alpha*(1/57.29577951);
      $cosa = cos($alp);
  }
  my $cosb;
  if ($beta == 90.0) {
     $cosb = 0.0;
  } else {
     my $bet = $beta*(1/57.29577951);
     $cosb = cos($bet);
  }
  my $cosg;
  my $sing;
  if ($gamma == 90.0) {
     $sing = 1.0;
     $cosg = 0.0;
  } else {
     my $gam = $gamma*(1/57.29577951);
     $sing = sin($gam);
     $cosg = cos($gam);
  }
  my $rv21 = 0.0;
  my $rv31 = 0.0;
  my $rv32 = 0.0;
  my $rv11 = $a;
  my $rv12 = $b*$cosg;
  my $rv22 = $b*$sing;
  my $rv13 = $c*$cosb;
  my $rv23 = $c*($cosa - $cosg*$cosb)/$sing;
  my $trm1 = $rv23/$c;
  my $rv33 = $c*sqrt(1.0 - $cosb**2 - $trm1**2);

  # Dump stuff...
  print "AutoGenerated GASP input\n";
  print "$rv11 $rv12 $rv13\n";
  print "$rv21 $rv22 $rv23\n";
  print "$rv31 $rv32 $rv33\n";
  # And the atoms...
  
  foreach my $i (0 .. ($atoms - 1)) {
    print $atomsName[$i] . " " . 
        (($atomsA[$i]*$rv11)+($atomsB[$i]*$rv12)+($atomsC[$i]*$rv13)) .  " " . 
	(($atomsA[$i]*$rv21)+($atomsB[$i]*$rv22)+($atomsC[$i]*$rv23)) . " " .
	(($atomsA[$i]*$rv31)+($atomsB[$i]*$rv32)+($atomsC[$i]*$rv33)) . "\n";
  }
  
}
